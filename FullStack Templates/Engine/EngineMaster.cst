<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="..\Common\MasterTemplate.cs" Inherits="FullStack.Common.MasterTemplate" OutputType="None" CompilerVersion="v4.0" %>
<!-- #include file="..\Common\HeaderInclude.cst" -->
<%@ Register Name="DbFactory" Template="Data\DbFactory_Static.cst" %>
<%@ Register Name="DbProviderTypes" Template="Data\DbProviderTypes_Static.cst" %>
<%@ Register Name="EngineDataClassTemplate" Template="Data\EngineDataClass.cst" %>
<%@ Register Name="EngineDataInterfaceTemplate" Template="Data\EngineDataInterface.cst" %>
<%@ Register Name="EngineModelsTemplate" Template="Models\EngineModel.cst" %>
<%@ Register Name="AuthorizationTokenTemplate" Template="Models\AuthorizationToken.cst" %>
<%@ Register Name="EngineManagerTemplate" Template="Services\EngineManager.cst" %>
<%@ Register Name="EngineManagerInterfaceTemplate" Template="Services\EngineManagerInterface.cst" %>

<%@ Register Name="AuthenticationDataClassTemplate" Template="Data\AuthenticationDataClass.cst" %>
<%@ Register Name="AuthenticationDataInterfaceTemplate" Template="Data\AuthenticationDataInterface.cst" %>
<%@ Register Name="AuthenticationManagerTemplate" Template="Services\AuthenticationManager.cst" %>
<%@ Register Name="AuthenticationManagerInterfaceTemplate" Template="Services\AuthenticationManagerInterface.cst" %>


<%@ Register Name="ProjectTemplate" Template="../Resources/EmptyCsLibraryProject.cst" %>
<%@ Register Name="AssemblyInfoTemplate" Template="../Resources/AssemblyInfoTemplate.cst" %>
<script runat="template">
private int _currentStep = 0;
private int _currentTableCount = 0;
private int _totalTableCount = 0;

public override void Render(TextWriter writer)
{
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias));
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Models"));
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Data"));
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Services"));
        
    string projectLocation = Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,this.CurrentProjectAlias + ".csproj");
    if (this.CreateProjectFiles)
    {
        ProjectTemplate projectTemplate = this.Create<ProjectTemplate>();
        this.CopyPropertiesTo(projectTemplate);
        projectTemplate.RenderToFile(projectLocation, true);
        this.CleanupProjectFile(projectLocation);
        
        // Copy Packages
        this.CopyNonTemplateFilesToFolder("Root",string.Empty);       
    }
    
    AssemblyInfoTemplate assemblyTemplate = this.Create<AssemblyInfoTemplate>();
    this.CopyPropertiesTo(assemblyTemplate);
    string assemblyTemplateLocation = Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Properties","AssemblyInfo.cs");
    assemblyTemplate.RenderToFile(assemblyTemplateLocation, true);
    
    _totalTableCount = this.SourceDatabase.Tables.Count;
    _currentTableCount = 0;
    
    // ADD STATIC FILES
    
    #region STATIC DATA FILES
    File.Copy(Path.Combine(this.CodeTemplateInfo.DirectoryName,"Models","PetaPoco.txt"),Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Models","PetaPoco.cs"));
    this.AddFileToProject(projectLocation,"Models",string.Format("PetaPoco.cs", this.GetClassName(this.CurrentTable)), string.Empty);

    this.BuildCurrentTableTemplate(this.Create<DbFactory>(),projectLocation,"Data","DbFactory.cs", string.Empty);
    this.BuildCurrentTableTemplate(this.Create<DbProviderTypes>(),projectLocation,"Data","DbProviderTypes.cs", string.Empty);
    
    this.BuildCurrentTableTemplate(this.Create<AuthorizationTokenTemplate>(),projectLocation,"Models","AuthorizationTokenModel.gen.cs","AuthorizationTokenModel.cs");
    this.BuildCurrentTableTemplate(this.Create<AuthenticationDataClassTemplate>(),projectLocation,"Data","AuthenticationDataBase.gen.cs","AuthenticationData.cs");
    this.BuildCurrentTableTemplate(this.Create<AuthenticationDataInterfaceTemplate>(),projectLocation,"Data","IAuthenticationData.gen.cs","IAuthenticationData.cs");
    this.BuildCurrentTableTemplate(this.Create<AuthenticationManagerTemplate>(),projectLocation,"Services","AuthenticationManagerBase.gen.cs","AuthenticationManager.cs");
    this.BuildCurrentTableTemplate(this.Create<AuthenticationManagerInterfaceTemplate>(),projectLocation,"Services","IAuthenticationManager.gen.cs","IAuthenticationManager.cs");            
    #endregion
    
    foreach(TableSchema table in this.SourceDatabase.Tables)
    {
        this.CurrentTable = table;
        _currentTableCount++;
     
        if (this.HasValidPrimaryKey(this.CurrentTable))
        {
            _currentStep = 1;
             
            this.BuildCurrentTableTemplate(this.Create<EngineModelsTemplate>(),projectLocation,"Models","{0}Model.gen.cs","{0}Model.cs");
            this.BuildCurrentTableTemplate(this.Create<EngineDataClassTemplate>(),projectLocation,"Data","{0}DataBase.gen.cs","{0}Data.cs");
            this.BuildCurrentTableTemplate(this.Create<EngineDataInterfaceTemplate>(),projectLocation,"Data","I{0}Data.gen.cs","I{0}Data.cs");
            this.BuildCurrentTableTemplate(this.Create<EngineManagerTemplate>(),projectLocation,"Services","{0}ManagerBase.gen.cs","{0}Manager.cs");
            this.BuildCurrentTableTemplate(this.Create<EngineManagerInterfaceTemplate>(),projectLocation,"Services","I{0}Manager.gen.cs","I{0}Manager.cs");            
         }
    }
}
</script>