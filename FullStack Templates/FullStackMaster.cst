<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="Common\MasterTemplate.cs" Inherits="FullStack.Common.MasterTemplate" CompilerVersion="v4.0" OutputType="None" %>
<!-- #include file="Common\HeaderInclude.cst" -->
<%@ Register Name="EngineMasterTemplate" Template="Engine\EngineMaster.cst" %>
<%@ Register Name="WebApiMasterTemplate" Template="WebApi\WebApiMaster.cst" %>
<%@ Register Name="ClientMasterTemplate" Template="Client\ClientMaster.cst" %>
<%@ Register Name="ClientTestsMasterTemplate" Template="ClientTests\ClientTestsMaster.cst" %>
<%@ Register Name="SolutionTemplate" Template="Resources\SolutionTemplate.cst" %>
<%@ Register Name="RepositoryTemplate" Template="Resources\RepositoriesTemplate.cst" %>

<script runat="template">
public override void Render(TextWriter writer)
{   
    // Project aliases allow you to rename what each area is called. Keep the key the same value since we lookup from this table.
    this.StackProjects  = new System.Collections.Generic.Dictionary<string,FullStack.Common.ProjectInfo>(){
             {"Engine", new FullStack.Common.ProjectInfo("Engine", System.Guid.NewGuid(), FullStack.Common.ProjectType.WindowsCSharp)},
             {"Client", new FullStack.Common.ProjectInfo("Client", System.Guid.NewGuid(), FullStack.Common.ProjectType.WindowsCSharp)},
             {"WebApi", new FullStack.Common.ProjectInfo("WebApi", System.Guid.NewGuid(), FullStack.Common.ProjectType.ASPNET_ONE)},
             {"ClientTests", new FullStack.Common.ProjectInfo("ClientTests", System.Guid.NewGuid(), FullStack.Common.ProjectType.Test)},
           };
    
    // Uncomment this code to always wipe the entire directory structure
    if (Directory.Exists(Path.Combine(this.OutputDirectory, this.SolutionName)))
    {
        Directory.Delete(Path.Combine(this.OutputDirectory, this.SolutionName), true);
        Directory.CreateDirectory(Path.Combine(this.OutputDirectory, this.SolutionName));    
    }    
    
    // If there is no solution file then we must run all code associated withc reating project files
    if (!File.Exists(Path.Combine(string.Format(Path.Combine(this.OutputDirectory, this.SolutionName, "{0}.sln"), this.SolutionName))))
    {        
        this.CreateProjectFiles = true;
    }
    
    // Clear out the base directory and create it if it doesn't exist
 
    if (this.CreateProjectFiles) 
    {
        this.ClearDirectory(this.OutputDirectory);
 
        // Create the Solution (SLN) file
        var solutionTemplate = this.Create<SolutionTemplate>();
        this.CopyPropertiesTo(solutionTemplate);
        solutionTemplate.RenderToFile(string.Format(Path.Combine(this.OutputDirectory, this.SolutionName, "{0}.sln"), this.SolutionName), true);    
        
        // Create the NuGet repositoy
        var repositoryTemplate = this.Create<RepositoryTemplate>();
        this.CopyPropertiesTo(repositoryTemplate);
        repositoryTemplate.RenderToFile(Path.Combine(this.OutputDirectory, this.SolutionName, "repositories.config"), true);    
        
        // Copy Packages
        string nugetPath = Path.Combine(this.OutputDirectory,this.SolutionName,".nuget");
        if (!System.IO.Directory.Exists(nugetPath)){
            System.IO.Directory.CreateDirectory(nugetPath);    
            
            var nugetFiles = System.IO.Directory.EnumerateFiles(Path.Combine(this.CodeTemplateInfo.DirectoryName,"Resources","nuget"));
            foreach (var filePath in nugetFiles)
        	{
        	    FileInfo fi = new FileInfo(filePath);
                fi.CopyTo(Path.Combine(nugetPath,fi.Name));
        	}
        }
    }
        
    var engineMaster = this.Create<EngineMasterTemplate>();
    this.CopyPropertiesTo(engineMaster);   
    engineMaster.ProjectName = "Engine";
    engineMaster.RenderToString();
    
    var webApiMaster = this.Create<WebApiMasterTemplate>();
    this.CopyPropertiesTo(webApiMaster);
    webApiMaster.ProjectName = "WebApi";
    webApiMaster.RenderToString();
    
    var clientMaster = this.Create<ClientMasterTemplate>();
    this.CopyPropertiesTo(clientMaster);
    clientMaster.ProjectName = "Client";
    clientMaster.RenderToString();
    
    var clientTestsMaster = this.Create<ClientTestsMasterTemplate>();
    this.CopyPropertiesTo(clientTestsMaster);
    clientTestsMaster.ProjectName = "ClientTests";
    clientTestsMaster.RenderToString();
}
</script>