<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="..\..\Common\MasterTemplate.cs" Inherits="FullStack.Common.MasterTemplate" Description="Generates a set of HTML-based database documentation." OutputType="None" %>
<!-- #include file="..\..\Common\HeaderInclude.cst" -->
namespace <%= this.SolutionName %>.<%= this.CurrentProjectAlias %>.Common
{
    using System;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;
    
    using Newtonsoft.Json;

    using <%= this.SolutionName %>.<%= this.CurrentProjectAlias %>.Api;
    using <%= this.SolutionName %>.<%= this.CurrentProjectAlias %>.Api.Models;
    
    public abstract partial class ApiBase
    {
        <% if (this.RenderBody) 
        { // START RENDERBODY
        %>
            #region Public Properties

        public DateTime SessionExpiration
        {
            get
            {
                return ApiCredentials.SessionExpiration;
            }
        }

        public string SessionKey
        {
            get
            {
                return ApiCredentials.SessionKey;
            }
        }

        #endregion

        #region Methods

        protected async Task<ApiResponse<bool>> Delete(string relativeUrl)
        {
            ApiResponse<bool> result = null;
            using (HttpClient client = this.GetHttpClient())
            {
                HttpResponseMessage response = await client.DeleteAsync(relativeUrl);
                if (response.IsSuccessStatusCode)
                {
                    string jsonResult = await response.Content.ReadAsStringAsync();
                    result = JsonConvert.DeserializeObject<ApiResponse<bool>>(jsonResult);

                    if (result.IsError)
                    {
                        foreach (ApiError error in result.Errors)
                        {
                            Log.Error(error.Message);
                        }
                    }
                }
            }

            return result;
        }

        protected async Task<ApiResponse<T>> Get<T>(string relativeUrl)
        {
            ApiResponse<T> result = null;
            using (HttpClient client = this.GetHttpClient())
            {
                HttpResponseMessage response = await client.GetAsync(relativeUrl);
                if (response.IsSuccessStatusCode)
                {
                    string jsonResult = await response.Content.ReadAsStringAsync();
                    result = JsonConvert.DeserializeObject<ApiResponse<T>>(jsonResult);

                    if (result.IsError)
                    {
                        foreach (ApiError error in result.Errors)
                        {
                            Log.Error(error.Message);
                        }
                    }
                }
            }

            return result;
        }

        protected HttpClient GetHttpClient()
        {
            byte[] authBytes = System.Text.Encoding.UTF8.GetBytes(string.Format("{0}:{1}", ApiCredentials.DeveloperId, ApiCredentials.SessionKey));
            // convert the byte array to a Base64 string
            string base64Auth = Convert.ToBase64String(authBytes);

            var client = new HttpClient();

            client.BaseAddress = new Uri(ApiCredentials.ApiUrl);
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));            
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", base64Auth);
            return client;
        }

        protected async Task<ApiResponse<T>> Post<T>(string relativeUrl, T value)
        {
            ApiResponse<T> result = null;
            using (HttpClient client = this.GetHttpClient())
            {
                HttpResponseMessage response = await client.PostAsJsonAsync(relativeUrl, value);
                if (response.IsSuccessStatusCode)
                {
                    string jsonResult = await response.Content.ReadAsStringAsync();
                    result = JsonConvert.DeserializeObject<ApiResponse<T>>(jsonResult);

                    if (result.IsError)
                    {
                        foreach (ApiError error in result.Errors)
                        {
                            Log.Error(error.Message);
                        }
                    }
                }
            }

            return result;
        }

        protected async Task<ApiResponse<T>> Put<T>(string relativeUrl, T value)
        {
            ApiResponse<T> result = null;
            using (HttpClient client = this.GetHttpClient())
            {
                HttpResponseMessage response = await client.PutAsJsonAsync(relativeUrl, value);
                if (response.IsSuccessStatusCode)
                {
                    string jsonResult = await response.Content.ReadAsStringAsync();
                    result = JsonConvert.DeserializeObject<ApiResponse<T>>(jsonResult);

                    if (result.IsError)
                    {
                        foreach (ApiError error in result.Errors)
                        {
                            Log.Error(error.Message);
                        }
                    }
                }
            }

            return result;
        }

        #endregion
        <% } // END RENDERBODY %>        
    }
}