<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="..\..\Common\MasterTemplate.cs" Inherits="FullStack.Common.MasterTemplate" Description="Generates a set of HTML-based database documentation." OutputType="None" %>
<!-- #include file="..\..\Common\HeaderInclude.cst" -->
namespace <%= this.SolutionName %>.<%= this.CurrentProjectAlias %>.Api
{
    using System;
    using System.Net;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    
    using <%= this.SolutionName %>.<%= this.CurrentProjectAlias %>.Api.Models;
    using <%= this.SolutionName %>.<%= this.CurrentProjectAlias %>.Common;
       
    public partial class <% = this.GetClassName(this.CurrentTable) %>Api : ApiBase
    {
        <% if (this.RenderBody) 
        { // START RENDERBODY
        %>
          #region Constructors and Destructors


        /// <summary>
        /// Initializes a new instance of the <see cref="<% = this.GetClassName(this.CurrentTable) %>"/> class.
        /// </summary>
        /// <param name="sessionKey"></param>
        /// <param name="sessionExpiration"></param>
        /// <param name="url"></param>
        internal <% = this.GetClassName(this.CurrentTable) %>Api()
        {           
        }

        #endregion
        
        public async Task<ApiResponse<IEnumerable<<%= this.GetModelClassName(CurrentTable) %>>>> GetAll<%= CurrentTable.Name %>()
        {
            return this.Get<IEnumerable<<%= this.GetModelClassName(CurrentTable) %>>>("<% = CurrentTable.Name %>/").Result;                     
        }

        public async Task<ApiResponse<<%= this.GetModelClassName(CurrentTable) %>>> Get<%= this.GetClassName(CurrentTable) %>(<%= this.GetPrimaryKeyType(CurrentTable) %> id)
        {
            return this.Get<<%= this.GetModelClassName(CurrentTable) %>>(string.Format("<% = CurrentTable.Name %>/{0}", WebUtility.HtmlEncode(<%= this.GetPrimaryKeyToString(CurrentTable, "id") %>))).Result;
        }

        public async Task<ApiResponse<<%= this.GetModelClassName(CurrentTable) %>>> Create<%= this.GetClassName(CurrentTable) %>(<%= this.GetModelClassName(CurrentTable) %> value)
        {
            return this.Post("<% = CurrentTable.Name %>", value).Result;
        }

        public async Task<ApiResponse<<%= this.GetModelClassName(CurrentTable) %>>> Update<%= this.GetClassName(CurrentTable) %>(<%= this.GetModelClassName(CurrentTable) %> value)
        {
            return this.Put(string.Format("<% = CurrentTable.Name %>/{0}", WebUtility.HtmlEncode(<%= this.GetPrimaryKeyToString(CurrentTable, "value.Id") %>)), value).Result;            
        }

        public async Task<ApiResponse<bool>> Delete<%= this.GetModelClassName(CurrentTable) %>ById(<%= this.GetPrimaryKeyType(CurrentTable) %> id)
        {
            return this.Delete(string.Format("<% = CurrentTable.Name %>/{0}", WebUtility.HtmlEncode(<%= this.GetPrimaryKeyToString(CurrentTable, "id") %>))).Result;           
        }

        <% } // END RENDERBODY %>        
    }
}