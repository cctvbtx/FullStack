<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="..\Common\MasterTemplate.cs" Inherits="FullStack.Common.MasterTemplate" OutputType="None" CompilerVersion="v4.0" %>
<!-- #include file="..\Common\HeaderInclude.cst" -->
<%@ Register Name="ProjectTemplate" Template="../Resources/EmptyAspNetProject.cst" %>
<%@ Register Name="AssemblyInfoTemplate" Template="../Resources/AssemblyInfoTemplate.cst" %>
<%@ Register Name="ControllerTemplate" Template="Controllers/WebApiControllerTemplate.cst" %>
<%@ Register Name="HomeControllerTemplate" Template="Controllers/HomeController.cst" %>
<%@ Register Name="ValuesControllerTemplate" Template="Controllers/ValuesController.cst" %>
<%@ Register Name="AuthenticationControllerTemplate" Template="Controllers/AuthenticationController.cst" %>

<%@ Register Name="ViewsWebConfigTemplate" Template="Views/Web.config.cst" %>

<%@ Register Name="RootWebConfigTemplate" Template="Root/Web.config.cst" %>

<%@ Register Name="GlobalAsaxTemplate" Template="Root/Global.asax.cst" %>
<%@ Register Name="GlobalAsaxCsTemplate" Template="Root/Global.asax.cs.cst" %>

<%@ Register Name="ApiResponseTemplate" Template="Models/ApiResponse.cst" %>

<%@ Register Name="AppStartBundleConfigTemplate" Template="App_Start/BundleConfig.cst" %>
<%@ Register Name="AppStartFilterConfigTemplate" Template="App_Start/FilterConfig.cst" %>
<%@ Register Name="AppStartRouteConfigTemplate" Template="App_Start/RouteConfig.cst" %>
<%@ Register Name="AppStartWebApiConfigTemplate" Template="App_Start/WebApiConfig.cst" %>

<script runat="template">
private int _currentStep = 0;
private int _currentTableCount = 0;
private int _totalTableCount = 0;

public override void Render(TextWriter writer)
{
    
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias));
    this.ClearDirectory(GetProjectOutputDirectory("App_Data"));
    this.ClearDirectory(GetProjectOutputDirectory("App_Start"));
    this.ClearDirectory(GetProjectOutputDirectory("Areas"));
    this.ClearDirectory(GetProjectOutputDirectory("Content"));
    this.ClearDirectory(GetProjectOutputDirectory("Controllers"));
    this.ClearDirectory(GetProjectOutputDirectory("fonts"));
    this.ClearDirectory(GetProjectOutputDirectory("Models"));
    this.ClearDirectory(GetProjectOutputDirectory("Scripts"));
    this.ClearDirectory(GetProjectOutputDirectory("Views"));
    this.ClearDirectory(GetProjectOutputDirectory("Views", "Home"));
    this.ClearDirectory(GetProjectOutputDirectory("Views", "Shared"));
    
    string projectLocation = GetProjectOutputDirectory(string.Empty, this.CurrentProjectAlias + ".csproj");
   
    if (this.CreateProjectFiles)
    {
        this.RenderTemplateToFile(this.Create<ProjectTemplate>(), projectLocation);
        
        this.AddAssemblyToProject(projectLocation,"Exceptionless",@"..\packages\Exceptionless.1.4.1954\lib\net45\Exceptionless.dll");
        this.AddAssemblyToProject(projectLocation,"Exceptionless.Models",@"..\packages\Exceptionless.1.4.1954\lib\net45\Exceptionless.Models.dll");
        this.AddAssemblyToProject(projectLocation,"log4net",@"..\packages\log4net.2.0.3\lib\net40-full\log4net.dll");
        
        string engineAlias = this.StackProjects["Engine"].Alias;
        this.AddProjectReferenceToProject(projectLocation, string.Format("../{0}/{0}.csproj",engineAlias), this.StackProjects["Engine"].ProjectGuid, engineAlias);
       
        //Copy the non-template file
        this.CopyNonTemplateFilesToFolder("Root",string.Empty);                
        this.CopyNonTemplateFilesToFolder("Scripts", "Scripts");
        this.CopyNonTemplateFilesToFolder("fonts", "fonts");
        this.CopyNonTemplateFilesToFolder("Content", "Content");
        this.CopyNonTemplateFilesToFolder("Views", "Views");
        this.CopyNonTemplateFilesToFolder(Path.Combine("Views","Home"), Path.Combine("Views","Home"));
        this.CopyNonTemplateFilesToFolder(Path.Combine("Views","Shared"), Path.Combine("Views","Shared"));
      
        
        this.RenderTemplateToFile(this.Create<RootWebConfigTemplate>(), GetProjectOutputDirectory("","Web.config"));
        
        this.RenderTemplateToFile(this.Create<GlobalAsaxTemplate>(), GetProjectOutputDirectory("","Global.asax"));
        this.RenderTemplateToFile(this.Create<GlobalAsaxCsTemplate>(), GetProjectOutputDirectory("","Global.asax.cs"));
        
        this.RenderTemplateToFile(this.Create<HomeControllerTemplate>(), GetProjectOutputDirectory("Controllers","HomeController.cs"));
        this.RenderTemplateToFile(this.Create<ValuesControllerTemplate>(), GetProjectOutputDirectory("Controllers","ValuesController.cs"));
        
        this.RenderTemplateToFile(this.Create<ViewsWebConfigTemplate>(), GetProjectOutputDirectory("Views","Web.config"));
        
        this.RenderTemplateToFile(this.Create<AppStartBundleConfigTemplate>(), GetProjectOutputDirectory("App_Start","BundleConfig.cs"));
        this.RenderTemplateToFile(this.Create<AppStartFilterConfigTemplate>(), GetProjectOutputDirectory("App_Start","FilterConfig.cs"));
        this.RenderTemplateToFile(this.Create<AppStartRouteConfigTemplate>(), GetProjectOutputDirectory("App_Start","RouteConfig.cs"));
        this.RenderTemplateToFile(this.Create<AppStartWebApiConfigTemplate>(), GetProjectOutputDirectory("App_Start","WebApiConfig.cs"));
        
        this.BuildCurrentTableTemplate(this.Create<AuthenticationControllerTemplate>(),projectLocation,"Controllers","AuthenticationController.gen.cs", "AuthenticationController.cs");
        this.BuildCurrentTableTemplate(this.Create<ApiResponseTemplate>(),projectLocation,"Models","ApiResponse.gen.cs", "ApiResponse.cs");
        
      
  
        
    }

    RenderTemplateToFile(this.Create<AssemblyInfoTemplate>(), Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Properties","AssemblyInfo.cs"));
    
    _totalTableCount = this.SourceDatabase.Tables.Count;
    _currentTableCount = 0;
    
    foreach(TableSchema table in this.SourceDatabase.Tables)
    {
        this.CurrentTable = table;
        _currentTableCount++;
     
        if (this.HasValidPrimaryKey(this.CurrentTable))
        {
            _currentStep = 1;
             
            this.BuildCurrentTableTemplate(this.Create<ControllerTemplate>(), projectLocation,"Controllers",string.Format("{0}Controller.gen.cs", this.CurrentTable.Name),string.Format("{0}Controller.cs", this.CurrentTable.Name));            
        }
    }
    
      this.CleanupProjectFile(projectLocation);
}

</script>