<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="..\..\Common\MasterTemplate.cs" Inherits="FullStack.Common.MasterTemplate" Description="Generates a set of HTML-based database documentation." OutputType="None" %>
<!-- #include file="..\..\Common\HeaderInclude.cst" -->
namespace <%= this.SolutionName %>.<%= this.CurrentProjectAlias %>
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    
    using NUnit.Framework;

    using <%= this.SolutionName %>.<%= this.StackProjects["Client"].Alias %>.Api.Models;
    using <%= this.SolutionName %>.<%= this.StackProjects["Client"].Alias %>.Common;
    using <%= this.SolutionName %>.<%= this.CurrentProjectAlias %>.Common;
    
    [TestFixture]
    public class <% = this.GetClassName(this.CurrentTable) %>Tests : ApiBase
    {      
        [Test]
        public void GetAll<%= this.GetClassName(CurrentTable) %>Test()
        {
            var api = TestHelper.GetApi();
            var apiResult = api.<%= CurrentTable.Name %>.GetAll<%= CurrentTable.Name %>();
            apiResult.Wait();
            
            ApiResponse<IEnumerable<<%= this.GetModelClassName(CurrentTable) %>>> result = apiResult.Result;
            Assert.IsNotNull(result);
            Assert.IsNotNull(result.Result);
            Assert.IsTrue(result.Result.Any());                          
        }

        [Test]
        public void Get<%= this.GetModelClassName(CurrentTable) %>ByIdTest()
        {
             var api = TestHelper.GetApi();

            ApiResponse<<%= this.GetModelClassName(CurrentTable) %>> result = null;
            <%= this.GetPrimaryKeyType(CurrentTable) %> id;
            Assert.Inconclusive();
        }

        [Test]
        public void Create<%= this.GetModelClassName(CurrentTable) %>Test()
        {
             var api = TestHelper.GetApi();

            <%= this.GetModelClassName(CurrentTable) %> actual;
            <%= this.GetModelClassName(CurrentTable) %> expected;
            Assert.Inconclusive();
        }

        [Test]
        public void Update<%= this.GetModelClassName(CurrentTable) %>Test()
        {
             var api = TestHelper.GetApi();

            <%= this.GetPrimaryKeyType(CurrentTable) %> id;
            <%= this.GetModelClassName(CurrentTable) %> actual;
            <%= this.GetModelClassName(CurrentTable) %> expected;
            Assert.Inconclusive();
        }

         [Test]
        public void Delete<%= this.GetModelClassName(CurrentTable) %>ByIdTest()
        {
            var api = TestHelper.GetApi();

            <%= this.GetPrimaryKeyType(CurrentTable) %> id;
            <%= this.GetModelClassName(CurrentTable) %> actual;
            <%= this.GetModelClassName(CurrentTable) %> expected;
            Assert.Inconclusive();
        }     
    }   
}
