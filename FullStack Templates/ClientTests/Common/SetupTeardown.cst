<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="..\..\Common\MasterTemplate.cs" Inherits="FullStack.Common.MasterTemplate" Description="Generates a set of HTML-based database documentation." OutputType="None" %>
<!-- #include file="..\..\Common\HeaderInclude.cst" -->
namespace <%= this.SolutionName %>.<%= this.CurrentProjectAlias %>.Common
{
    using System;
    using System.Diagnostics;
    using System.Threading;

    using NUnit.Framework;

    using <%= this.SolutionName %>.<%= this.StackProjects["Client"].Alias %>.Api.Models;
    using <%= this.SolutionName %>.<%= this.StackProjects["Client"].Alias %>.Common;

     [SetUpFixture]
    public class SetupTeardown
    {
        #region Fields

        private Process _iisProcess;

        private string AppLocation = @"<% = Path.Combine(this.OutputDirectory,this.SolutionName,this.StackProjects["WebApi"].Alias) %>";

        #endregion

        #region Public Methods and Operators

        [SetUp]
        public void Setup()
        {
            if (TestConstants.UseIisExpress)
            {
                var thread = new Thread(this.StartIisExpress) { IsBackground = true };

                thread.Start();    
            }
            
        }

        [TearDown]
        public void Teardown()
        {
            if (TestConstants.UseIisExpress)
            {
                if (_iisProcess != null)
                {
                    this._iisProcess.CloseMainWindow();
                    this._iisProcess.Dispose();
                }
            }            
        }

        #endregion

        #region Methods

        private void StartIisExpress()
        {
            var startInfo = new ProcessStartInfo { WindowStyle = ProcessWindowStyle.Normal, ErrorDialog = true, LoadUserProfile = true, CreateNoWindow = false, UseShellExecute = false, Arguments = string.Format("/path:\"{0}\" /port:{1}", AppLocation, TestConstants.Port) };

            string programfiles = string.IsNullOrEmpty(startInfo.EnvironmentVariables["programfiles"]) ? startInfo.EnvironmentVariables["programfiles(x86)"] : startInfo.EnvironmentVariables["programfiles"];

            startInfo.FileName = programfiles + "\\IIS Express\\iisexpress.exe";

            try
            {
                this._iisProcess = new Process { StartInfo = startInfo };

                bool start = this._iisProcess.Start();
                
                this._iisProcess.WaitForExit();
            }
            catch
            {
                this._iisProcess.CloseMainWindow();
                this._iisProcess.Dispose();
            }
        }

        #endregion
    }
}