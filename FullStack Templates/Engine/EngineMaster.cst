<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="..\Common\MasterTemplate.cs" Inherits="FullStack.Common.MasterTemplate" OutputType="None" CompilerVersion="v4.0" %>
<!-- #include file="..\Common\HeaderInclude.cst" -->
<%@ Register Name="Common_Log" Template="Common\Log.cst" %>
<%@ Register Name="Common_ClaimTypes" Template="Common\ClaimTypes.cst" %>
<%@ Register Name="Common_ClaimsIdentity" Template="Common\ClaimsIdentity.cst" %>
<%@ Register Name="Common_Principal" Template="Common\Principal.cst" %>

<%@ Register Name="Data_AuthenticationDataClass" Template="Data\AuthenticationDataClass.cst" %>
<%@ Register Name="Data_AuthenticationDataInterface" Template="Data\AuthenticationDataInterface.cst" %>
<%@ Register Name="Data_DbFactory" Template="Data\DbFactory_Static.cst" %>
<%@ Register Name="Data_DbProviderTypes" Template="Data\DbProviderTypes_Static.cst" %>
<%@ Register Name="Data_EngineDataClass" Template="Data\EngineDataClass.cst" %>
<%@ Register Name="Data_EngineDataInterface" Template="Data\EngineDataInterface.cst" %>
<%@ Register Name="Data_DatabaseExtensions" Template="Data\DatabaseExtensions.cst" %>

<%@ Register Name="Models_AuthorizationToken" Template="Models\AuthorizationToken.cst" %>
<%@ Register Name="Models_EngineModels" Template="Models\EngineModel.cst" %>

<%@ Register Name="Resources_ResourceManager" Template="Resources\ResourceManager.cst" %>

<%@ Register Name="Root_SolutionConfig" Template="Root\SolutionConfig.cst" %>

<%@ Register Name="Services_AuthenticationManager" Template="Services\AuthenticationManager.cst" %>
<%@ Register Name="Services_AuthenticationManagerInterface" Template="Services\AuthenticationManagerInterface.cst" %>
<%@ Register Name="Services_EngineManager" Template="Services\EngineManager.cst" %>
<%@ Register Name="Services_EngineManagerInterface" Template="Services\EngineManagerInterface.cst" %>

<%@ Register Name="Setup_DatabaseManager" Template="Setup\DatabaseManager.cst" %>
<%@ Register Name="Setup_UpgradeStep" Template="Setup\UpgradeStep.cst" %>
<%@ Register Name="Setup_UpgradeStepManager" Template="Setup\UpgradeStepManager.cst" %>
<%@ Register Name="Setup_UpgradeStepVersion" Template="Setup\UpgradeStepVersion.cst" %>


<%@ Register Name="ProjectTemplate" Template="../Resources/EmptyCsLibraryProject.cst" %>
<%@ Register Name="AssemblyInfoTemplate" Template="../Resources/AssemblyInfoTemplate.cst" %>
<script runat="template">
private int _currentStep = 0;
private int _currentTableCount = 0;
private int _totalTableCount = 0;

public override void Render(TextWriter writer)
{
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias));
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Common"));
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Data"));
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Databases"));
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Exceptions"));
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Models"));
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Resources"));
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Resources","Database","v1"));
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Services"));
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Setup"));
    
        
    string projectLocation = Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,this.CurrentProjectAlias + ".csproj");
    if (this.CreateProjectFiles)
    {
        ProjectTemplate projectTemplate = this.Create<ProjectTemplate>();
        this.CopyPropertiesTo(projectTemplate);
        projectTemplate.RenderToFile(projectLocation, true);
        
        // Copy Packages
        this.CopyNonTemplateFilesToFolder("Root",string.Empty);       
        
        this.AddAssemblyToProject(projectLocation,"Exceptionless",@"..\packages\Exceptionless.1.4.1954\lib\net45\Exceptionless.dll");
        this.AddAssemblyToProject(projectLocation,"Exceptionless.Models",@"..\packages\Exceptionless.1.4.1954\lib\net45\Exceptionless.Models.dll");
        this.AddAssemblyToProject(projectLocation,"log4net",@"..\packages\log4net.2.0.3\lib\net40-full\log4net.dll");
        
    }
    
    AssemblyInfoTemplate assemblyTemplate = this.Create<AssemblyInfoTemplate>();
    this.CopyPropertiesTo(assemblyTemplate);
    string assemblyTemplateLocation = Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Properties","AssemblyInfo.cs");
    assemblyTemplate.RenderToFile(assemblyTemplateLocation, true);
    
    _totalTableCount = this.SourceDatabase.Tables.Count;
    _currentTableCount = 0;
    
    // ADD STATIC FILES
    
    #region STATIC DATA FILES
    File.Copy(Path.Combine(this.CodeTemplateInfo.DirectoryName,"Models","PetaPoco.txt"),Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Models","PetaPoco.cs"));
    this.AddFileToProject(projectLocation,"Models","PetaPoco.cs", string.Empty);

    File.Copy(Path.Combine(this.CodeTemplateInfo.DirectoryName,"Resources","log4net.config"),Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Resources","log4net.config"));
    this.AddFileToProject(projectLocation,"Resources","log4net.config", string.Empty);
    
    
   //string[] dbFiles = new []{"Indexes.sql","SeedData.sql", "Steps.xml", "StoredProcs.sql", "Tables.sql"};
  
    string sourceDbFileDirectory = Path.Combine(this.CodeTemplateInfo.DirectoryName,"Resources","Database","v1");
    
    if (!string.IsNullOrEmpty(this.DatabaseSetupFilesDirectory))
    {
        if (Directory.Exists(this.DatabaseSetupFilesDirectory))
        {
            if (File.Exists(Path.Combine(this.DatabaseSetupFilesDirectory, "Steps.xml")))
            {
                sourceDbFileDirectory = this.DatabaseSetupFilesDirectory;
            }    
        }
    }
    
    foreach (var sourceFilePath in Directory.GetFiles(sourceDbFileDirectory))
  	{
        System.IO.FileInfo fi = new System.IO.FileInfo(sourceFilePath);
        
        File.Copy(fi.FullName, Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Resources","Database","v1",fi.Name));
        this.AddFileToProject(projectLocation,@"Resources\Database\v1",fi.Name, string.Empty);
  	}
    
    this.BuildCurrentTableTemplate(this.Create<Common_ClaimsIdentity>(),projectLocation,"Common",this.SolutionName + "ClaimsIdentity.cs", string.Empty);
    this.BuildCurrentTableTemplate(this.Create<Common_ClaimTypes>(),projectLocation,"Common",this.SolutionName + "ClaimTypes.cs", string.Empty);
    this.BuildCurrentTableTemplate(this.Create<Common_Principal>(),projectLocation,"Common",this.SolutionName + "Principal.cs", string.Empty);
    this.BuildCurrentTableTemplate(this.Create<Common_Log>(),projectLocation,"Common","Log.cs", string.Empty);
    
    this.BuildCurrentTableTemplate(this.Create<Data_AuthenticationDataClass>(),projectLocation,"Data","AuthenticationDataBase.gen.cs","AuthenticationData.cs");
    this.BuildCurrentTableTemplate(this.Create<Data_AuthenticationDataInterface>(),projectLocation,"Data","IAuthenticationData.gen.cs","IAuthenticationData.cs");
    this.BuildCurrentTableTemplate(this.Create<Data_DbFactory>(),projectLocation,"Data","DbFactory.cs", string.Empty);
    this.BuildCurrentTableTemplate(this.Create<Data_DbProviderTypes>(),projectLocation,"Data","DbProviderTypes.cs", string.Empty);
    this.BuildCurrentTableTemplate(this.Create<Data_DatabaseExtensions>(),projectLocation,"Data","DatabaseExtensions.cs", string.Empty);
       
    this.BuildCurrentTableTemplate(this.Create<Models_AuthorizationToken>(),projectLocation,"Models","AuthorizationTokenModel.gen.cs","AuthorizationTokenModel.cs");
    
    this.BuildCurrentTableTemplate(this.Create<Resources_ResourceManager>(),projectLocation,"Resources","ResourceManager.cs",string.Empty);
    
    this.BuildCurrentTableTemplate(this.Create<Root_SolutionConfig>(),projectLocation,"",this.SolutionName + "Config.cs",string.Empty);
    
    this.BuildCurrentTableTemplate(this.Create<Setup_DatabaseManager>(),projectLocation,"Setup","DatabaseManager.cs",string.Empty);
    this.BuildCurrentTableTemplate(this.Create<Setup_UpgradeStep>(),projectLocation,"Setup","UpgradeStep.cs",string.Empty);
    this.BuildCurrentTableTemplate(this.Create<Setup_UpgradeStepManager>(),projectLocation,"Setup","UpgradeStepManager.cs",string.Empty);
    this.BuildCurrentTableTemplate(this.Create<Setup_UpgradeStepVersion>(),projectLocation,"Setup","UpgradeStepVersion.cs",string.Empty);
    
    this.BuildCurrentTableTemplate(this.Create<Services_AuthenticationManager>(),projectLocation,"Services","AuthenticationManagerBase.gen.cs","AuthenticationManager.cs");
    this.BuildCurrentTableTemplate(this.Create<Services_AuthenticationManagerInterface>(),projectLocation,"Services","IAuthenticationManager.gen.cs","IAuthenticationManager.cs");            
    #endregion
    
    
    foreach(TableSchema table in this.SourceDatabase.Tables)
    {
        this.CurrentTable = table;
        _currentTableCount++;
     
        if (this.HasValidPrimaryKey(this.CurrentTable))
        {
            _currentStep = 1;
             
            this.BuildCurrentTableTemplate(this.Create<Models_EngineModels>(),projectLocation,"Models","{0}Model.gen.cs","{0}Model.cs");
            this.BuildCurrentTableTemplate(this.Create<Data_EngineDataClass>(),projectLocation,"Data","{0}DataBase.gen.cs","{0}Data.cs");
            this.BuildCurrentTableTemplate(this.Create<Data_EngineDataInterface>(),projectLocation,"Data","I{0}Data.gen.cs","I{0}Data.cs");
            this.BuildCurrentTableTemplate(this.Create<Services_EngineManager>(),projectLocation,"Services","{0}ManagerBase.gen.cs","{0}Manager.cs");
            this.BuildCurrentTableTemplate(this.Create<Services_EngineManagerInterface>(),projectLocation,"Services","I{0}Manager.gen.cs","I{0}Manager.cs");            
         }
    }
    
    this.CleanupProjectFile(projectLocation);
      
}
</script>