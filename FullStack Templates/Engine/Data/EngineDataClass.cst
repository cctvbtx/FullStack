<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="..\..\Common\MasterTemplate.cs" Inherits="FullStack.Common.MasterTemplate" Description="Generates a set of HTML-based database documentation." OutputType="None" CompilerVersion="v4.0" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="System.Linq" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import Namespace="System.Data" %>
namespace <%= this.SolutionName %>.<%= this.CurrentProjectAlias %>.Data
{
    using System;
    using System.Data;
    using PetaPoco;
    using <% = this.SolutionName %>.<% = this.StackProjects["Engine"].Alias %>.Models;

    <%-- ONLY RENDER THE INTERFACE IF WE ARE RENDERING THE BODY--%>
    internal <% this.RenderBodyWrite("abstract"); %> class <% this.RenderBodyWrite(string.Format("{0}Base : I{0}",this.GetDataClassName(CurrentTable)), string.Format("{0} : {0}Base",this.GetDataClassName(CurrentTable))); %> 
    {
        <% if (this.RenderBody) 
        { // START RENDERBODY
        %>
        public virtual <%= this.GetModelClassName(CurrentTable) %> Create(<%= this.GetModelClassName(CurrentTable) %> model)
		{
		    using (Database db = DbFactory.GetDatabase())
            {
               object output = db.Insert(model);
               if (output != null)
               {
                    model = Read((<%= this.GetPrimaryKeyType(CurrentTable) %>)output);
               }
            }
            
            return model;
		}
        
         public virtual <%= this.GetModelClassName(CurrentTable) %> Read(<%= this.GetPrimaryKeyType(CurrentTable) %> id)
		{
		    <%= this.GetModelClassName(CurrentTable) %> model = null;
            using (Database db = DbFactory.GetDatabase())
            {
                model = db.SingleOrDefault<<%= this.GetModelClassName(CurrentTable) %>>("WHERE <%= this.GetPrimaryKeyName(CurrentTable) %>=@0", id);
            }

            return model;
		}
        
        public virtual <%= this.GetModelClassName(CurrentTable) %> Update(<%= this.GetModelClassName(CurrentTable) %> model)
		{
			using (Database db = DbFactory.GetDatabase())
            {
                bool result = db.Update(model) > 0;                
            }
            
            return model;
		}
        
        public virtual bool Delete(<%= GetPrimaryKeyType(CurrentTable) %> id)
		{
            bool result = false;
            using (Database db = DbFactory.GetDatabase())
            {
                result = db.Delete<<%= this.GetModelClassName(CurrentTable) %>>(id) > 0;                
            }
            
            return result;
		}
		<% } // END RENDERBODY %>
    }
}
<script runat="template">

</script>