<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="..\..\Common\MasterTemplate.cs" Inherits="FullStack.Common.MasterTemplate" Description="Generates a set of HTML-based database documentation." OutputType="None" %>
<!-- #include file="..\..\Common\HeaderInclude.cst" -->
namespace <%= this.SolutionName %>.<%= this.CurrentProjectAlias %>.Api
{
    using System;
    using System.Net;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    
    using <%= this.SolutionName %>.<%= this.CurrentProjectAlias %>.Api.Models;
    using <%= this.SolutionName %>.<%= this.CurrentProjectAlias %>.Common;
       
    public partial class <% = this.GetClassName(this.CurrentTable) %>Api : ApiBase
    {
        <% if (this.RenderBody) 
        { // START RENDERBODY
        %>
          #region Constructors and Destructors


        /// <summary>
        /// Initializes a new instance of the <see cref="<% = this.GetClassName(this.CurrentTable) %>"/> class.
        /// </summary>
        /// <param name="sessionKey"></param>
        /// <param name="sessionExpiration"></param>
        /// <param name="url"></param>
        internal <% = this.GetClassName(this.CurrentTable) %>Api()
        {           
        }

        #endregion
        
        public async Task<IEnumerable<<%= this.GetModelClassName(CurrentTable) %>>> GetAll<%= CurrentTable.Name %>()
        {
            IEnumerable<<%= this.GetModelClassName(CurrentTable) %>> result = null;

            using (var client = this.GetHttpClient())
            {
                HttpResponseMessage response = await client.GetAsync(string.Format("<% = CurrentTable.Name %>/"));
                if (response.IsSuccessStatusCode)
                {
                    string jsonResult = await response.Content.ReadAsStringAsync();
                    ApiResponse<IEnumerable<<%= this.GetModelClassName(CurrentTable) %>>> token = JsonConvert.DeserializeObject<ApiResponse<IEnumerable<<%= this.GetModelClassName(CurrentTable) %>>>>(jsonResult);

                    if (!token.IsError)
                    {
                        result = token.Result;
                    }
                }
            }

            return result;                     
        }

        public async Task<<%= this.GetModelClassName(CurrentTable) %>> Get<%= this.GetClassName(CurrentTable) %>(<%= this.GetPrimaryKeyType(CurrentTable) %> id)
        {
            <%= this.GetModelClassName(CurrentTable) %> result = null;

            using (var client = this.GetHttpClient())
            {
                HttpResponseMessage response = await client.GetAsync(string.Format("<% = CurrentTable.Name %>/{0}", WebUtility.HtmlEncode(<%= this.GetPrimaryKeyToString(CurrentTable, "id") %>)));
                if (response.IsSuccessStatusCode)
                {
                    string jsonResult = await response.Content.ReadAsStringAsync();
                    ApiResponse<<%= this.GetModelClassName(CurrentTable) %>> token = JsonConvert.DeserializeObject<ApiResponse<<%= this.GetModelClassName(CurrentTable) %>>>(jsonResult);

                    if (!token.IsError)
                    {
                        result = token.Result;
                    }
                }
            }

            return result;
        }

        public async Task<<%= this.GetModelClassName(CurrentTable) %>> Create<%= this.GetClassName(CurrentTable) %>(<%= this.GetModelClassName(CurrentTable) %> value)
        {
            throw new NotImplementedException();
        }

        public async Task<<%= this.GetModelClassName(CurrentTable) %>> Update<%= this.GetClassName(CurrentTable) %>(<%= this.GetModelClassName(CurrentTable) %> value)
        {
            throw new NotImplementedException();
        }

        public async Task<<%= this.GetModelClassName(CurrentTable) %>> Delete<%= this.GetModelClassName(CurrentTable) %>ById(<%= this.GetPrimaryKeyType(CurrentTable) %> id)
        {
            throw new NotImplementedException();
        }

        <% } // END RENDERBODY %>        
    }
}