<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="..\Common\MasterTemplate.cs" Inherits="FullStack.Common.MasterTemplate" OutputType="None" CompilerVersion="v4.0" %>
<!-- #include file="..\Common\HeaderInclude.cst" -->
<%@ Register Name="ClientModelTemplate" Template="Api\Models\ClientModelTemplate.cst" %>
<%@ Register Name="ProjectTemplate" Template="..\Resources\EmptyCsLibraryProject.cst" %>
<%@ Register Name="AssemblyInfoTemplate" Template="..\Resources\AssemblyInfoTemplate.cst" %>

<%@ Register Name="AuthenticationTemplate" Template="Root\Authentication.cst" %>
<%@ Register Name="AppConfigTemplate" Template="Root\app.config.cst" %>
<%@ Register Name="ApiCredentialsTemplate" Template="Api\ApiCredentials.cst" %>
<%@ Register Name="CoreApiTemplate" Template="Api\CoreApi.cst" %>
<%@ Register Name="ClassApiTemplate" Template="Api\ClassApi.cst" %>
<%@ Register Name="ApiResponseTemplate" Template="Api\Models\ApiResponse.cst" %>
<%@ Register Name="AuthorizationTokenTemplate" Template="Api\Models\AuthorizationToken.cst" %>
<%@ Register Name="ApiBaseTemplate" Template="Common\ApiBase.cst" %>
<%@ Register Name="LogTemplate" Template="Common\Log.cst" %>


<script runat="template">
private int _currentStep = 0;
private int _currentTableCount = 0;
private int _totalTableCount = 0;

public override void Render(TextWriter writer)
{    
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias));
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Api"));
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Api","Models"));
    this.ClearDirectory(Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Common"));
       
    string projectLocation = Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Client.csproj");
    if (this.CreateProjectFiles)
    {
        ProjectTemplate projectTemplate = this.Create<ProjectTemplate>();
        this.CopyPropertiesTo(projectTemplate);
        projectTemplate.RenderToFile(projectLocation, true);
        
        this.AddAssemblyToProject(projectLocation,"Exceptionless",@"..\packages\Exceptionless.1.4.1954\lib\net45\Exceptionless.dll");
        this.AddAssemblyToProject(projectLocation,"Exceptionless.Models",@"..\packages\Exceptionless.1.4.1954\lib\net45\Exceptionless.Models.dll");
        this.AddAssemblyToProject(projectLocation,"log4net",@"..\packages\log4net.2.0.3\lib\net40-full\log4net.dll");
        this.AddAssemblyToProject(projectLocation, "System.Net.Http");
        this.AddAssemblyToProject(projectLocation, "System.Net.Http.Formatting");
        this.AddAssemblyToProject(projectLocation, "Newtonsoft.Json");
        
       
        // Copy Packages
        this.CopyNonTemplateFilesToFolder("Root",string.Empty);

        this.BuildTemplate(this.Create<AppConfigTemplate>(), projectLocation, string.Empty, "app.config", string.Empty);
        this.BuildTemplate(this.Create<AuthenticationTemplate>(), projectLocation, string.Empty, "Authentication.gen.cs", "Authentication.cs");
        this.BuildTemplate(this.Create<ApiCredentialsTemplate>(), projectLocation, "Api", "ApiCredentials.gen.cs", "ApiCredentials.cs");
        this.BuildTemplate(this.Create<CoreApiTemplate>(), projectLocation, "Api", this.ApiClassAlias + ".gen.cs", this.ApiClassAlias + ".cs");
        this.BuildTemplate(this.Create<ApiResponseTemplate>(), projectLocation, @"Api\Models", "ApiResponse.gen.cs", "ApiResponse.cs");
        this.BuildTemplate(this.Create<AuthorizationTokenTemplate>(), projectLocation, @"Api\Models", "AuthorizationTokenModel.gen.cs", "AuthorizationTokenModel.cs");
        this.BuildTemplate(this.Create<ApiBaseTemplate>(), projectLocation, "Common", "ApiBase.gen.cs", "ApiBase.cs");
        this.BuildTemplate(this.Create<LogTemplate>(), projectLocation, "Common", "Log.gen.cs", "Log.cs");
    }
    
    AssemblyInfoTemplate assemblyTemplate = this.Create<AssemblyInfoTemplate>();
    this.CopyPropertiesTo(assemblyTemplate);
    string assemblyTemplateLocation = Path.Combine(this.OutputDirectory,this.SolutionName,this.CurrentProjectAlias,"Properties","AssemblyInfo.cs");
    assemblyTemplate.RenderToFile(assemblyTemplateLocation, true);
    
    _totalTableCount = this.SourceDatabase.Tables.Count;
    _currentTableCount = 0;
    
    foreach(TableSchema table in this.SourceDatabase.Tables)
    {
        this.CurrentTable = table;
        _currentTableCount++;
     
        if (this.HasValidPrimaryKey(this.CurrentTable))
        {
            _currentStep = 1;
            this.BuildCurrentTableTemplate(this.Create<ClassApiTemplate>(),projectLocation,@"Api","{0}Api.gen.cs","{0}Api.cs");
            this.BuildCurrentTableTemplate(this.Create<ClientModelTemplate>(),projectLocation,@"Api\Models","{0}Model.gen.cs","{0}Model.cs");
        }
    }
    
     this.CleanupProjectFile(projectLocation);

}

</script>