<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="Common\MasterTemplate.cs" Inherits="FullStack.Common.MasterTemplate" CompilerVersion="v4.0" OutputType="None" %>
<%@ Register Name="EngineMasterTemplate" Template="Engine\EngineMaster.cst" %>
<%@ Register Name="WebApiMasterTemplate" Template="WebApi\WebApiMaster.cst" %>
<%@ Register Name="ClientMasterTemplate" Template="Client\ClientMaster.cst" %>
<%@ Register Name="SolutionTemplate" Template="Resources\SolutionTemplate.cst" %>
<%@ Register Name="RepositoryTemplate" Template="Resources\RepositoriesTemplate.cst" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="System.Linq" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System.Xml.Linq" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import Namespace="System.Data" %>

<script runat="template">
private int _currentStep = 0;
private int _currentTableCount = 0;
private int _totalTableCount = 0;

public override void Render(TextWriter writer)
{
    if (!File.Exists(Path.Combine(string.Format(Path.Combine(this.OutputDirectory, this.SolutionName, "{0}.sln"), this.SolutionName))))
    {        
        this.CreateProjectFiles = true;
    }
    
    this.ClearDirectory(this.OutputDirectory);
    
    this.ProjectAliases  = new System.Collections.Generic.Dictionary<string,string>(){
             {"Engine","Engine"},
             {"Client","Client"},
             {"WebApi","WebApi"},
           };
    
    this.ProjectGuids = new System.Collections.Generic.Dictionary<System.String, System.Guid>();
    
    foreach (var key in this.ProjectAliases.Keys)
	{
		   ProjectGuids.Add(key, Guid.NewGuid());    
	}
    
    if (this.CreateProjectFiles) 
    {
        var solutionTemplate = this.Create<SolutionTemplate>();
        this.CopyPropertiesTo(solutionTemplate);
        solutionTemplate.RenderToFile(string.Format(Path.Combine(this.OutputDirectory, this.SolutionName, "{0}.sln"), this.SolutionName), true);    
        
        var repositoryTemplate = this.Create<RepositoryTemplate>();
        this.CopyPropertiesTo(repositoryTemplate);
        repositoryTemplate.RenderToFile(Path.Combine(this.OutputDirectory, this.SolutionName, "repositories.config"), true);    
        
        // Copy Packages
        string nugetPath = Path.Combine(this.OutputDirectory,this.SolutionName,".nuget");
        if (!System.IO.Directory.Exists(nugetPath)){
            System.IO.Directory.CreateDirectory(nugetPath);    
            
            var nugetFiles = System.IO.Directory.EnumerateFiles(Path.Combine(this.CodeTemplateInfo.DirectoryName,"Resources","nuget"));
            foreach (var filePath in nugetFiles)
        	{
        	    FileInfo fi = new FileInfo(filePath);
                fi.CopyTo(Path.Combine(nugetPath,fi.Name));
        	}
        }
        
        
    }
        
    var engineMaster = this.Create<EngineMasterTemplate>();
    this.CopyPropertiesTo(engineMaster);   
    engineMaster.ProjectName = "Engine";
    engineMaster.RenderToString();
    
    var webApiMaster = this.Create<WebApiMasterTemplate>();
    this.CopyPropertiesTo(webApiMaster);
    webApiMaster.ProjectName = "WebApi";
    webApiMaster.RenderToString();
    
    var clientMaster = this.Create<ClientMasterTemplate>();
    this.CopyPropertiesTo(clientMaster);
    clientMaster.ProjectName = "Client";
    clientMaster.RenderToString();
    
 
}

public void OnProgress(object sender, ProgressEventArgs e)
{
    if (e.Value > 0)
    {
        this.Progress.Value = 75 + (_currentStep * 100) + (int)(((Double)e.Value / (Double)e.MaximumValue) * 100);
    }
}
</script>